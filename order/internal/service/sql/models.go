// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sql

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

type PaymentProvider string

const (
	PaymentProviderStripe PaymentProvider = "stripe"
	PaymentProviderSbp    PaymentProvider = "sbp"
)

func (e *PaymentProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentProvider(s)
	case string:
		*e = PaymentProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentProvider: %T", src)
	}
	return nil
}

type NullPaymentProvider struct {
	PaymentProvider PaymentProvider
	Valid           bool // Valid is true if PaymentProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentProvider) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentProvider), nil
}

type PaymentStatus string

const (
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusSucceeded PaymentStatus = "succeeded"
	PaymentStatusFailed    PaymentStatus = "failed"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type Order struct {
	ID        uuid.UUID
	Status    PaymentStatus
	Total     decimal.Decimal
	IsActive  bool
	CreatedAt time.Time
	UpdatedAt time.Time
}
