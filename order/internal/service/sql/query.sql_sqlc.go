// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sql

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const addOrderItem = `-- name: AddOrderItem :exec
INSERT INTO order_items (id, order_id, product_id, qty, unit_price)
VALUES ($1, $2, $3, $4, $5)
`

type AddOrderItemParams struct {
	ID        uuid.UUID
	OrderID   uuid.UUID
	ProductID uuid.UUID
	Qty       int32
	UnitPrice decimal.Decimal
}

func (q *Queries) AddOrderItem(ctx context.Context, arg *AddOrderItemParams) error {
	_, err := q.db.Exec(ctx, addOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Qty,
		arg.UnitPrice,
	)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id, status, total, is_active, customer_first_name, customer_last_name,
                    customer_email, customer_phone, address)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateOrderParams struct {
	ID                uuid.UUID
	Status            PaymentStatus
	Total             decimal.Decimal
	IsActive          bool
	CustomerFirstName string
	CustomerLastName  string
	CustomerEmail     string
	CustomerPhone     string
	Address           string
}

func (q *Queries) CreateOrder(ctx context.Context, arg *CreateOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.Status,
		arg.Total,
		arg.IsActive,
		arg.CustomerFirstName,
		arg.CustomerLastName,
		arg.CustomerEmail,
		arg.CustomerPhone,
		arg.Address,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (id, order_id, provider, status, amount, transaction_ref)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePaymentParams struct {
	ID             uuid.UUID
	OrderID        uuid.UUID
	Provider       PaymentProvider
	Status         PaymentStatus
	Amount         decimal.Decimal
	TransactionRef *string
}

func (q *Queries) CreatePayment(ctx context.Context, arg *CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment,
		arg.ID,
		arg.OrderID,
		arg.Provider,
		arg.Status,
		arg.Amount,
		arg.TransactionRef,
	)
	return err
}

const getActiveOrders = `-- name: GetActiveOrders :many
SELECT id, status, total, is_active, customer_first_name, customer_last_name, customer_email, customer_phone, address, created_at, updated_at
FROM orders
WHERE is_active = true
ORDER BY created_at DESC
`

func (q *Queries) GetActiveOrders(ctx context.Context) ([]*Order, error) {
	rows, err := q.db.Query(ctx, getActiveOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Total,
			&i.IsActive,
			&i.CustomerFirstName,
			&i.CustomerLastName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT id, status, total, is_active, customer_first_name, customer_last_name, customer_email, customer_phone, address, created_at, updated_at
FROM orders
ORDER BY created_at DESC
`

func (q *Queries) GetAllOrders(ctx context.Context) ([]*Order, error) {
	rows, err := q.db.Query(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Total,
			&i.IsActive,
			&i.CustomerFirstName,
			&i.CustomerLastName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderStatus = `-- name: GetOrderStatus :one
SELECT id, status, total
FROM orders
WHERE id = $1
`

type GetOrderStatusRow struct {
	ID     uuid.UUID
	Status PaymentStatus
	Total  decimal.Decimal
}

func (q *Queries) GetOrderStatus(ctx context.Context, id uuid.UUID) (*GetOrderStatusRow, error) {
	row := q.db.QueryRow(ctx, getOrderStatus, id)
	var i GetOrderStatusRow
	err := row.Scan(&i.ID, &i.Status, &i.Total)
	return &i, err
}
