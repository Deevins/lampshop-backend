// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sql

import (
	"context"

	"github.com/google/uuid"
)

const createAttributeOption = `-- name: CreateAttributeOption :exec
INSERT INTO attribute_options (category_id, key, label, type)
VALUES ($1, $2, $3, $4)
RETURNING id, category_id, key, label, type
`

type CreateAttributeOptionParams struct {
	CategoryID uuid.UUID
	Key        string
	Label      string
	Type       string
}

func (q *Queries) CreateAttributeOption(ctx context.Context, arg *CreateAttributeOptionParams) error {
	_, err := q.db.Exec(ctx, createAttributeOption,
		arg.CategoryID,
		arg.Key,
		arg.Label,
		arg.Type,
	)
	return err
}

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createCategory, name)
	return err
}

const deleteAttributeOption = `-- name: DeleteAttributeOption :exec
DELETE
FROM attribute_options
WHERE id = $1
`

func (q *Queries) DeleteAttributeOption(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAttributeOption, id)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE
FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, hashed_password, created_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.Username, &i.HashedPassword, &i.CreatedAt)
	return &i, err
}

const listAttributeOptionsByCategory = `-- name: ListAttributeOptionsByCategory :many
SELECT id, category_id, key, label, type
FROM attribute_options
WHERE category_id = $1
ORDER BY id
`

func (q *Queries) ListAttributeOptionsByCategory(ctx context.Context, categoryID uuid.UUID) ([]*AttributeOption, error) {
	rows, err := q.db.Query(ctx, listAttributeOptionsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AttributeOption
	for rows.Next() {
		var i AttributeOption
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Key,
			&i.Label,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, name
FROM categories
ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context) ([]*Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
