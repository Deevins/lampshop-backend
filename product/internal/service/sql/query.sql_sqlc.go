// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sql

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (id, name) VALUES ($1, $2)
`

type CreateCategoryParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateCategory(ctx context.Context, arg *CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory, arg.ID, arg.Name)
	return err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    id, sku, name, description, category_id, is_active, image_url,
    price, stock_qty, attributes, created_at, updated_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7,
             $8, $9, $10, $11, $12
         )
`

type CreateProductParams struct {
	ID          uuid.UUID
	Sku         string
	Name        string
	Description *string
	CategoryID  uuid.UUID
	IsActive    bool
	ImageUrl    *string
	Price       decimal.Decimal
	StockQty    int32
	Attributes  json.RawMessage
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateProduct(ctx context.Context, arg *CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct,
		arg.ID,
		arg.Sku,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.IsActive,
		arg.ImageUrl,
		arg.Price,
		arg.StockQty,
		arg.Attributes,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, sku, name, description, category_id, is_active, image_url, price, stock_qty, attributes, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (*Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.IsActive,
		&i.ImageUrl,
		&i.Price,
		&i.StockQty,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name FROM categories ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context) ([]*Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, sku, name, description, category_id, is_active, image_url, price, stock_qty, attributes, created_at, updated_at FROM products ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]*Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.IsActive,
			&i.ImageUrl,
			&i.Price,
			&i.StockQty,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products SET
                    name = $2,
                    description = $3,
                    category_id = $4,
                    is_active = $5,
                    image_url = $6,
                    price = $7,
                    stock_qty = $8,
                    attributes = $9,
                    updated_at = $10
WHERE id = $1
`

type UpdateProductParams struct {
	ID          uuid.UUID
	Name        string
	Description *string
	CategoryID  uuid.UUID
	IsActive    bool
	ImageUrl    *string
	Price       decimal.Decimal
	StockQty    int32
	Attributes  json.RawMessage
	UpdatedAt   time.Time
}

func (q *Queries) UpdateProduct(ctx context.Context, arg *UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.IsActive,
		arg.ImageUrl,
		arg.Price,
		arg.StockQty,
		arg.Attributes,
		arg.UpdatedAt,
	)
	return err
}
